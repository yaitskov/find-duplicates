#!/usr/bin/ruby

# Copyright 2013 Daneel S. Yaitskov

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# this tool is written directly for 1 usecase.
# There is 2 folders containing relativly similar files
# but these files are in different pathes.
# And you need to merge to folder structures
# without space overhead.

# Solution. Merge file sets with cp or rsync.
# Start this script over 1 directory structure.
# Script builds hashes for all files.
# Groups pathes to files with the same hash.

require 'optparse'
require 'ruby-progressbar'
require 'find-duplicates'
include FindDuplicates

options = {
  :bar => lambda { |size| ProgressBar.create(:title => "Hashing",
                                             :format => '%t: %e %P |%b%i|',
                                             :total => size) },
  :dry => true,
  :remove_policy => PolicyLeaveLongest.new
}

paths = []
begin
  OptionParser.new do |opts|
    opts.banner = 'Usage: find-duplicates.rb [ options ] <path-to-dir>'
    opts.on('-d', '--dry',
            'default. dry run. just show groups duplicated files 
                                      and which one will be left') do |v|
      options[:dry] = true
    end
    opts.on('-B', '--no-bar',
            'hide progress bar') do |v|
      options[:bar] = lambda { |size| DummyBar.new }
    end
    opts.on('-r', '--run',
            'delete duplicates by the specified policy') do |v|
      options[:dry] = false
    end
    opts.on('-l', '--longest',
            'policy leaves a file with longest name among duplicates') do |v|
      options[:remove_policy] = PolicyLeaveLongest.new
    end
  end.parse!

  if ARGV.empty?
    raise "there isn't any path given"  
  end

  paths = ARGV.map do |path|
    raise "path '#{ path }' isn't a directory" if !File.directory?(path)
    path.sub(/\/+ *$/, '')        
  end
rescue 
  $stderr.puts "Error #{ $! }"
  exit 1
end

find_duplicates(options,paths)



